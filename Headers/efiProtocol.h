#pragma once

#include <efitypes.h>

typedef enum{
    EFI_NATIVE_INTERFACE
}EFI_INTERFACE_TYPE;

typedef enum{
    AllHandles,
    ByRegisterNotify,
    ByProtocol
}EFI_LOCATE_SEARCH_TYPE;

typedef struct{
    EFI_HANDLE AgentHandle;
    EFI_HANDLE ControllerHandle;
    UINT32 Attributes;
    UINT32 OpenCount;
}EFI_OPEN_PROTOCOL_INFORMATION_ENTRY;

#define EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL 0x1
#define EFI_OPEN_PROTOCOL_GET_PROTOCOL 0x2
#define EFI_OPEN_PROTOCOL_TEST_PROTOCOL 0x4
#define EFI_OPEN_PROTOCOL_BY_CHILD_CONTROLLER 0x8
#define EFI_OPEN_PROTOCOL_BY_DRIVER 0x10
#define EFI_OPEN_PROTOCOL_EXCLUSIVE 0x20

typedef EFI_STATUS (EFIAPI *EFI_INSTALL_PROTOCOL_INTERFACE) (EFI_HANDLE*,EFI_GUID*,EFI_INTERFACE_TYPE,VOID*);
typedef EFI_STATUS (EFIAPI *EFI_REINSTALL_PROTOCOL_INTERFACE) (EFI_HANDLE,EFI_GUID*,VOID*,VOID*);
typedef EFI_STATUS (EFIAPI *EFI_UNINSTALL_PROTOCOL_INTERFACE) (EFI_HANDLE,EFI_GUID*,VOID*);
typedef EFI_STATUS (EFIAPI *EFI_HANDLE_PROTOCOL) (EFI_HANDLE,EFI_GUID*,VOID**);
typedef EFI_STATUS (EFIAPI *EFI_LOCATE_HANDLE) (EFI_LOCATE_SEARCH_TYPE,EFI_GUID*,VOID*,UINTN*,EFI_HANDLE*);
typedef EFI_STATUS (EFIAPI *EFI_OPEN_PROTOCOL) (EFI_HANDLE,EFI_GUID*,VOID**,EFI_HANDLE,EFI_HANDLE,UINT32);
typedef EFI_STATUS (EFIAPI *EFI_CLOSE_PROTOCOL) (EFI_HANDLE,EFI_GUID*,EFI_HANDLE,EFI_HANDLE);
typedef EFI_STATUS (EFIAPI *EFI_OPEN_PROTOCOL_INFORMATION) (EFI_HANDLE,EFI_GUID*,EFI_OPEN_PROTOCOL_INFORMATION_ENTRY**,UINTN*);
typedef EFI_STATUS (EFIAPI *EFI_PROTOCOLS_PER_HANDLE) (EFI_HANDLE, EFI_GUID***,UINTN*);
typedef EFI_STATUS (EFIAPI *EFI_LOCATE_HANDLE_BUFFER) (EFI_LOCATE_SEARCH_TYPE,EFI_GUID*,VOID*,UINTN*,EFI_HANDLE**);
typedef EFI_STATUS (EFIAPI *EFI_LOCATE_PROTOCOL) (EFI_GUID*,VOID*,VOID**);
typedef EFI_STATUS (EFIAPI *EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES) (EFI_HANDLE*,...);
typedef EFI_STATUS (EFIAPI *EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES) (EFI_HANDLE,...);