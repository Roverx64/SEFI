#pragma once

#include <efitypes.h>
#include <efiMem.h>
#include <efiProtocol.h>
#include <efiEvent.h>
#include <devicePathProtocol.h>

//Based on version 2.11 of the UEFI specification

#define EFI_BOOT_SERVICES_SIGNATURE 0x56524553544f4f42

typedef EFI_STATUS (EFIAPI *EFI_INSTALL_CONFIGURATION_TABLE) (EFI_GUID*,VOID*);
typedef EFI_STATUS (EFIAPI *EFI_IMAGE_LOAD) (BOOLEAN,EFI_HANDLE,EFI_DEVICE_PATH_PROTOCOL*,VOID*,UINTN,EFI_HANDLE*);
typedef EFI_STATUS (EFIAPI *EFI_IMAGE_START) (EFI_HANDLE,UINTN*,CHAR16**);
typedef EFI_STATUS (EFIAPI *EFI_EXIT) (EFI_HANDLE,EFI_STATUS,UINTN,CHAR16*);
typedef EFI_STATUS (EFIAPI *EFI_IMAGE_UNLOAD) (EFI_HANDLE);
typedef EFI_STATUS (EFIAPI *EFI_EXIT_BOOT_SERVICES) (EFI_HANDLE,UINTN);
typedef EFI_STATUS (EFIAPI *EFI_GET_NEXT_MONOTONIC_COUNT) (UINT64*);
typedef EFI_STATUS (EFIAPI *EFI_STALL) (UINTN);
typedef EFI_STATUS (EFIAPI *EFI_SET_WATCHDOG_TIMER) (UINTN,UINT64,UINTN,CHAR16*);
typedef EFI_STATUS (EFIAPI *EFI_CONNECT_CONTROLLER) (EFI_HANDLE,EFI_HANDLE*,EFI_DEVICE_PATH_PROTOCOL*,BOOLEAN);
typedef EFI_STATUS (EFIAPI *EFI_DISCONNECT_CONTROLLER) (EFI_HANDLE,EFI_HANDLE,EFI_HANDLE);

typedef struct{
    EFI_TABLE_HEADER Hdr;
    EFI_RAISE_TPL RaiseTPL;
    EFI_RESTORE_TPL RestoreTPL;
    EFI_ALLOCATE_PAGES AllocatePages;
    EFI_FREE_PAGES FreePages;
    EFI_GET_MEMORY_MAP GetMemoryMap;
    EFI_ALLOCATE_POOL AllocatePool;
    EFI_FREE_POOL FreePool;
    EFI_CREATE_EVENT CreateEvent;
    EFI_SET_TIMER SetTimer;
    EFI_WAIT_FOR_EVENT WaitForEvent;
    EFI_SIGNAL_EVENT SignalEvent;
    EFI_CLOSE_EVENT CloseEvent;
    EFI_CHECK_EVENT CheckEvent;
    EFI_INSTALL_PROTOCOL_INTERFACE InstallProtocolInterface;
    EFI_REINSTALL_PROTOCOL_INTERFACE ReinstallProtocolInterface;
    EFI_UNINSTALL_PROTOCOL_INTERFACE UninstallProtocolInterface;
    EFI_HANDLE_PROTOCOL HandleProtocol;
    VOID *Reserved;
    EFI_REGISTER_PROTOCOL_NOTIFY RegisterProtocolNotify;
    EFI_LOCATE_HANDLE LocateHandle;
    EFI_LOCATE_DEVICE_PATH LocateDevicePath;
    EFI_INSTALL_CONFIGURATION_TABLE InstallConfigurationTable;
    EFI_IMAGE_LOAD LoadImage;
    EFI_IMAGE_START StartImage;
    EFI_EXIT Exit;
    EFI_IMAGE_UNLOAD UnloadImage;
    EFI_EXIT_BOOT_SERVICES ExitBootServices;
    EFI_GET_NEXT_MONOTONIC_COUNT GetNextMonotonicCount;
    EFI_STALL Stall;
    EFI_SET_WATCHDOG_TIMER SetWatchdogTimer;
    EFI_CONNECT_CONTROLLER ConnectController;
    EFI_DISCONNECT_CONTROLLER DisconnectController;
    EFI_OPEN_PROTOCOL OpenProtocol;
    EFI_CLOSE_PROTOCOL CloseProtocol;
    EFI_OPEN_PROTOCOL_INFORMATION OpenProtocolInformation;
    EFI_PROTOCOLS_PER_HANDLE ProtocolsPerHandle;
    EFI_LOCATE_HANDLE_BUFFER LocateHandleBuffer;
    EFI_LOCATE_PROTOCOL LocateProtocol;
    EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES InstallMultipleProtocolInterfaces;
    EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES UninstallMultipleProtocolInterfaces;
    EFI_CALCULATE_CRC32 CalculateCrc32;
    EFI_COPY_MEM CopyMem;
    EFI_SET_MEM SetMem;
    EFI_CREATE_EVENT_EX CreateEventEx;
}EFI_BOOT_SERVICES;